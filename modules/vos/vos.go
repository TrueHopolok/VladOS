/*
# VladOS Security

VladOS Security (shortly VOS) is a package used for all security related stuff inside VladOS the project.
Below are all features this package provides.

# Key Chain

2 cryptografy keys used for JWT and thus for session encryption.
Automatic keys switch after [EncryptionKeysSwitchingTime] minutes ensures keys are hard to crack.

# Json Web Token functional

Fully working JWT with a nice functions to create and validate tokens.
Used in combination with sessions and in [auth.AuthMiddleware] functional.

For more details see [JWTheader], [NewJWT], [ValidateJWT].

# Password and Salt logic

Password is generated with [golang.org/x/crypto/argon2] package.
Salt is generated via [crypto/rand.Read] to ensure cryptografic salt.

For more details see [GenerateSalt], [NewPSH], [ValidatePSH].

# Auth - VOS sub-package

Package providing the interface to work with authorization on the http server.
Provides session functional, cookies handlers and middleware as wrapper function for blocking unwanted traffic.

For more details see [github.com/TrueHopolok/VladOS/modules/vos/auth] package.
*/
package vos

//go:generate go tool github.com/princjef/gomarkdoc/cmd/gomarkdoc -o documentation.md

import (
	"crypto/rand"
	"reflect"

	"golang.org/x/crypto/argon2"
)

// Size of a salt that is generated by [GenerateSalt] in bytes.
const SaltSize int = 64

// Argon2 encryption specific parameters
const (
	PSH_TIME = 1
	PSH_MEM  = 64 * 1024
	PSH_THR  = 4
	PSH_LEN  = 64
)

// Returns completly crypto random salt to use for password hashing.
func GenerateSalt() []byte {
	salt := make([]byte, SaltSize)
	rand.Read(salt)
	return salt
}

// PSH - Password Salted and Hashed.
// Function simplifies getting hashed password with given salt.
func NewPSH(password string, salt []byte) []byte {
	return argon2.IDKey([]byte(password), salt, PSH_TIME, PSH_MEM, PSH_THR, PSH_LEN)
}

// PSH - Password Salted and Hashed.
// Function simplifies validating that given PSH is for the given password and salt combination.
func ValidatePSH(password string, salt, psh []byte) bool {
	got := argon2.IDKey([]byte(password), salt, PSH_TIME, PSH_MEM, PSH_THR, PSH_LEN)
	return reflect.DeepEqual(got, psh)
}
